[isort]

# Forces a list of imports to the top of their respective section.
force_to_top = false

# A list of files to skip sorting completely.
skip =

# A list of glob patterns to skip sorting completely.
skip_glob =

# A list of files to never skip sorting.
not_skip =

# An integer that represents the longest line-length
# you want a single import to take. Default is 80.
line_length = 79

# An integer that represents the longest line-length you want when wrapping.
# If not set will default to line_length.
wrap_length = 79

# A list of imports that will be forced to display
# within the future library category.
known_future_library =

# A list of imports that will be forced to display
# within the third party category.
known_third_party =

# A list of imports that will be forced to display
# within the first party category.
known_first_party =

# Virtual env to use for determining whether a package is third-party.
virtual_env =

# An integer that represents how you want imports to be displayed if
# their long enough to span multiple lines. A full definition of
# all possible modes can be found in isort's README.
multi_line_output = 3

# A list of modules that you want to appear in their own separate section.
forced_separate =

# An integer that represents the number of spaces you would
# like to indent by or Tab to indent by a single tab.
indent = 4

# If set to true - imports will be sorted by their
# length instead of alphabetically.
length_sort = false

# If set to true - instead of wrapping multi-line from style imports,
# each import will be forced to display on its own line.
force_single_line = false

# Force from imports to be grid wrapped regardless of line length,
# where the value given is the number of imports allowed
# before wrapping occurs.
force_grid_wrap = false

# The default section to place imports in, if their section can not be
# automatically determined. FIRSTPARTY, THIRDPARTY, etc.
default_section = FIRSTPARTY

# A comment to consistently place directly above future imports.
# import_heading_future = Future

# A comment to consistently place directly above imports from the stdlib.
# import_heading_stdlib = Stdlib

# A comment to consistently place directly above thirdparty imports.
# import_heading_thirdparty = Thirdparty

# A comment to consistently place directly above imports from this project.
# import_heading_firstparty =

# A comment to consistently place directly above imports that start with '.'.
# import_heading_localfolder =

# If set to true - for each multi-line import statement isort will dynamic
# change the import length to the one that produces the most balanced
# grid, while staying below the maximum import length defined.
balanced_wrapping = true

# If set to true - isort will create separate sections withing "from" imports
# for CONSTANTS, Classes, modules and functions.
order_by_type = true

# If set to true - isort will only change a file in place if the resulting
# file has correct Python syntax. This defaults to false because it can
# only work if the version of code having it's imports sorted is
# running the same version of Python as isort itself.
atomic = true

# Forces a certain number of lines after the imports and before the first
# line of functional code. By default this is 2 lines if the first
# line of code is a class or function. Otherwise it's 1.
# lines_after_imports =

# Forces a certain number of lines between the two import types
# (import lib and from lib import foo) within a section.
# lines_between_types =

# If set to true - isort will combine as imports on the same line
# within for import statements. By default isort forces all as
# imports to display on their own lines.
combine_as_imports = false

# If set to true - isort will add imports even if the file
# specified is currently completely empty.
force_adds = false

# If set to true - ensures that if a star import is present,
# nothing else is imported from that namespace.
combine_star = false

# If set to true - isort will print out verbose information such as when
# a file is skipped intentionally or when a file check is successful.
verbose = false

# Can be used from the command line to manually specify
# the location of a settings file.
settings-path =

# Will set isort to automatically add a trailing comma
# to the end of from imports.
include_trailing_comma = true

# Tells isort to use parenthesis for line continuation instead of \ for lines
# over the allotted line length limit.
use_parentheses = true

# If set, from imports will be displayed above normal (straight) imports.
# from_first =

# If set, import sorting will take case in consideration when sorting.
# case_sensitive =

# A comma-delimited list of imports to add to every file ran through isort.
add_imports =

# Tells isort to filter files even when they are explicitly passed in as
# part of the command. This is especially useful to get skip and
# skip_glob to work when running isort through pre-commit.
filter_files =

# If set, imports will be sorted within their section
# independent to the import_type.
# force_sort_within_sections =

# If set, forces all imports to be sorted as a single section,
# instead of within other groups (such as straight vs from).
force_alphabetical_sort = false
