[metadata]
license_file = LICENSE

[bdist_wheel]
universal = true

[sdist]
formats = zip, gzip

[mypy]
# Mypy is a static type checker for Python 3 and Python 2.7.
# mypy can type check your code and find common bugs.

# Specifies the Python version used to parse and check the target program.
# The default is the version of the Python interpreter used to run mypy.
python_version = 3.7

# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true

# Directs what to do with imports when the imported module is
# found as a .py file and not part of the files, modules
# and packages provided on the command line.
follow_imports = normal

# Disallows calling functions without type annotations
# from functions with type annotations.
disallow_untyped_calls = true

# Disallows defining functions without type annotations
# or with incomplete type annotations.
disallow_untyped_defs = false

# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = false

# Type-checks the interior of functions without type annotations.
check_untyped_defs = true

# Enables or disables strict Optional checks. If False, mypy
# treats None as compatible with every type.
strict_optional = true

# Warns about casting an expression to its inferred type.
warn_redundant_casts = true

# Warns about unneeded # type: ignore comments.
warn_unused_ignores = true

# Shows errors for missing return statements on some execution paths.
warn_no_return = true

# Shows a warning when returning a value with type Any from
# a function declared with a non- Any return type.
warn_return_any = false

# Shows a warning when encountering any code inferred to
# be unreachable after performing type analysis.
warn_unreachable = true

# Ignores all non-fatal errors.
ignore_errors = false

# Causes mypy to suppress errors caused by not being able to fully
# infer the types of global and class variables.
allow_untyped_globals = false

# Allows variables to be redefined with an arbitrary type,
# as long as the redefinition is in the same block
# and nesting level as the original def.
allow_redefinition = false

# Prohibit equality checks, identity checks, and container
# checks between non-overlapping types.
strict_equality = true

# Prefixes each error with the relevant context.
show_error_context = true

# Shows column numbers in error messages.
show_column_numbers = true

# Shows error codes in error messages. See Error codes for more information.
show_error_codes = true

# Use visually nicer output in error messages: use soft word wrap,
# show source code snippets, and show error location markers.
pretty = true

# Shows error messages with color enabled.
color_output = true

# Shows a short summary line after error messages.
error_summary = true

# Show absolute paths to files.
show_absolute_path = false

# Warns about per-module sections in the config file that
# do not match any files processed when invoking mypy.
warn_unused_configs = True

[mypy-uvloop,pandas,catboost]
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true

[isort]
# isort is a Python utility to sort imports alphabetically, and automatically
# separated into sections. It provides a cmd line utility, Python library
# and plugins for various editors to quickly sort all your imports.

# Forces a list of imports to the top of their respective section.
force_to_top = false

# A list of files to skip sorting completely.
skip =

# A list of glob patterns to skip sorting completely.
skip_glob =

# A list of files to never skip sorting.
not_skip =

# An integer that represents the longest line-length
# you want a single import to take. Default is 80.
line_length = 79

# An integer that represents the longest line-length you want when wrapping.
# If not set will default to line_length.
wrap_length = 79

# A list of imports that will be forced to display
# within the future library category.
known_future_library =

# A list of imports that will be forced to display
# within the third party category.
known_third_party =

# A list of imports that will be forced to display
# within the first party category.
known_first_party =

# Virtual env to use for determining whether a package is third-party.
virtual_env =

# An integer that represents how you want imports to be displayed if
# their long enough to span multiple lines. A full definition of
# all possible modes can be found in isort's README.
multi_line_output = 3

# A list of modules that you want to appear in their own separate section.
forced_separate =

# An integer that represents the number of spaces you would
# like to indent by or Tab to indent by a single tab.
indent = 4

# If set to true - imports will be sorted by their
# length instead of alphabetically.
length_sort = false

# If set to true - instead of wrapping multi-line from style imports,
# each import will be forced to display on its own line.
force_single_line = false

# Force from imports to be grid wrapped regardless of line length,
# where the value given is the number of imports allowed
# before wrapping occurs.
force_grid_wrap = false

# The default section to place imports in, if their section can not be
# automatically determined. FIRSTPARTY, THIRDPARTY, etc.
default_section = FIRSTPARTY

# A comment to consistently place directly above future imports.
# import_heading_future = Future

# A comment to consistently place directly above imports from the stdlib.
# import_heading_stdlib = Stdlib

# A comment to consistently place directly above thirdparty imports.
# import_heading_thirdparty = Thirdparty

# A comment to consistently place directly above imports from this project.
# import_heading_firstparty =

# A comment to consistently place directly above imports that start with '.'.
# import_heading_localfolder =

# If set to true - for each multi-line import statement isort will dynamic
# change the import length to the one that produces the most balanced
# grid, while staying below the maximum import length defined.
balanced_wrapping = true

# If set to true - isort will create separate sections withing "from" imports
# for CONSTANTS, Classes, modules and functions.
order_by_type = true

# If set to true - isort will only change a file in place if the resulting
# file has correct Python syntax. This defaults to false because it can
# only work if the version of code having it's imports sorted is
# running the same version of Python as isort itself.
atomic = true

# Forces a certain number of lines after the imports and before the first
# line of functional code. By default this is 2 lines if the first
# line of code is a class or function. Otherwise it's 1.
# lines_after_imports =

# Forces a certain number of lines between the two import types
# (import lib and from lib import foo) within a section.
# lines_between_types =

# If set to true - isort will combine as imports on the same line
# within for import statements. By default isort forces all as
# imports to display on their own lines.
combine_as_imports = false

# If set to true - isort will add imports even if the file
# specified is currently completely empty.
force_adds = false

# If set to true - ensures that if a star import is present,
# nothing else is imported from that namespace.
combine_star = false

# If set to true - isort will print out verbose information such as when
# a file is skipped intentionally or when a file check is successful.
verbose = false

# Can be used from the command line to manually specify
# the location of a settings file.
settings-path =

# Will set isort to automatically add a trailing comma
# to the end of from imports.
include_trailing_comma = true

# Tells isort to use parenthesis for line continuation instead of \ for lines
# over the allotted line length limit.
use_parentheses = true

# If set, from imports will be displayed above normal (straight) imports.
# from_first =

# If set, import sorting will take case in consideration when sorting.
# case_sensitive =

# A comma-delimited list of imports to add to every file ran through isort.
add_imports =

# Tells isort to filter files even when they are explicitly passed in as
# part of the command. This is especially useful to get skip and
# skip_glob to work when running isort through pre-commit.
filter_files =

# If set, imports will be sorted within their section
# independent to the import_type.
# force_sort_within_sections =

# If set, forces all imports to be sorted as a single section,
# instead of within other groups (such as straight vs from).
force_alphabetical_sort = false
